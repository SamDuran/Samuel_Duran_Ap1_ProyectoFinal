@page "/EntradasAlmacen"
@page "/EntradasAlmacen/{EntradasId:int}"

@inject IToastService toastService
@inject EntradasBLL entradasBLL
@inject AlmacenBLL almacenBLL
@inject MaterialesBLL materialesBLL
@inject TransportistasBLL transportistasBLL

<PageTitle>Entradas de material</PageTitle>
@if(isLoading)
{
    <div class="Loader-Container">
        <div class="Loader"/>
        <div class="Loader2"/>
    </div>
}else
{
    <EditForm Model="entrada" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div className="Container" style="Margin: 20px;">
            <div class="card">

                <div class="card-header">
                    <h3 style="text-align: center;">Entradas de materiales</h3>
                </div>

                <div class="card-body" style="Margin: 15px 100px 15px 100px;">

                    @* ID *@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <div class="input-group" style="margin-top: 18px; margin-bottom: 18px;">
                                    <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">ID
                                        Entrada</span>
                                    <InputNumber @bind-Value="entrada.EntradaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" style="z-index: 0;" class="btn btn-primary input-group-text"
                                            @onclick="Buscar"><span class="oi oi-magnifying-glass">Buscar</span></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @* Fecha registro *@
                    <div class="input-group" style="margin-top: 18px; margin-bottom: 18px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Fecha de
                            movimiento</span>
                        <InputDate @bind-Value="entrada.FechaEntrada" class="form-control col-4" />
                        <ValidationMessage For="@(() => entrada.FechaEntrada)" />
                    </div>

                    @* Almacen origen *@
                    <div class="input-group" style="margin-top: 18px; margin-bottom: 18px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Almac&eacute;n Origen</span>
                        <InputSelect @bind-Value="entrada.AlmacenId" class="form-select text-14 col-4">
                            <option selected hidden value="0">-- Seleccione un almac&eacute;n origen --</option>
                            @foreach (var almacen in listaAlmacenes)
                            {
                                <option value="@almacen.AlmacenId">@almacen.DenominacionCentro: @almacen.NombreCentro</option>
                            }
                        </InputSelect>
                    </div>

                    @* Transportista *@
                    <div class="input-group" style="margin-top: 18px; margin-bottom: 18px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Transportista</span>
                        <InputSelect @bind-Value="entrada.TransportistaId" class="form-select text-14 col-4">
                            <option selected hidden value="0">-- Seleccione un transportista --</option>
                            @foreach (var transportista in listaTransportistas)
                            {
                                <option value="@transportista.TransportistaId">@transportista.Nombres @transportista.Apellidos</option>
                            }
                        </InputSelect>
                    </div>
                    @* subcard Materiales *@
                    <div class="card">

                        <div class="card-header">
                            <h3>Materiales recibidos</h3>
                        </div>

                        <div class="card-body">
                            <div class="input-group d-flex align-items-end">
                                <div class="flex-fill mx-2">
                                    <label>Material</label>
                                    <InputSelect @bind-Value="recibido.MaterialId" class="form-select text-14">
                                        <option value="0" selected="selected" disabled="disabled" hidden="hidden">
                                            -- Seleccione un material --</option>
                                        @foreach (var item in listaMateriales)
                                        {
                                            <option value="@item.MaterialId">@item.Descripcion (Cantidad: @item.Cantidad @item.UnidadesMedida)</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="flex-fill mx-2" style="width: 12px;">
                                    <label>Cantidad</label>
                                    <InputNumber class="form-control" @bind-Value="recibido.Cantidad" />
                                </div>
                                <div class="input-group-append">
                                    <button type="button" style="z-index: 0;" class="btn btn-primary input-group-text"
                                        @onclick="AgregarRecibido">
                                        <span class="oi oi-plus"> Add</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            @* Tabla de detalles *@
                            <table class="table t">
                                <thead class="thead">
                                    <tr class="table">
                                        <th>ID Material</th>
                                        <th>ID recibido</th>
                                        <th>Descripci&oacute;n</th>
                                        <th>Cantidad</th>
                                        <th>Costo material</th>
                                        <th>Costo Total</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var recibido in materialesRecibidos)
                                    {
                                        recibidoMaterial = materialesBLL.Buscar(recibido.MaterialId);
                                        @if(recibidoMaterial!=null)
                                        {
                                            costoRecibido = recibido.Cantidad * recibidoMaterial.Costo;
                                            <tr>
                                                <td>@recibido.MaterialId</td>
                                                <td>@recibido.ID</td>
                                                <td>@recibidoMaterial.Descripcion</td>
                                                <td>@recibido.Cantidad</td>
                                                <td>@recibidoMaterial.Costo</td>
                                                <td>@costoRecibido</td>
                                                <td><span class="btn btn-sm btn-outline-secondary oi oi-x"
                                                    @onclick="@(() => RemoverRecibido(recibido))"></span></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                            <div Class="form-group" style="margin: 22px; width: 40%; display: right;">
                                <div class="input-group">
                                    <span class="input-group-text">Costo Total de entrada:</span>
                                    <InputNumber readonly class="form-control" @bind-Value="entrada.PrecioTotal"/>
                                    <span class="input-group-text">$RD</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    @* Botones *@
                    <div class="form-group text-center" style="justify-content: space-between;">
                        <button type="button" style="margin: 10px;" class="btn btn-lg btn-primary"
                            @onclick="Nuevo">Nuevo</button>
                        <button type="submit" style="margin: 10px;" class="btn btn-lg btn-success">Guardar</button>
                        <button type="button" style="margin: 10px;" class="btn btn-lg btn-danger"
                            @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int EntradasId { get; set; }
    private bool isLoading {get;set;} = true;
    private decimal costoRecibido {get;set;}
    public MaterialesRecibidos recibido { get; set; } = new MaterialesRecibidos();
    public EntradasAlmacen entrada { get; set; } = new EntradasAlmacen();
    public Materiales? recibidoMaterial { get; set; } = new Materiales();
    public List<Almacenes> listaAlmacenes { get; set; } = new List<Almacenes>();
    public List<Materiales> listaMateriales { get; set; } = new List<Materiales>();
    public List<Transportistas> listaTransportistas { get; set; } = new List<Transportistas>();
    public List<MaterialesRecibidos> materialesRecibidos {get;set;} = new List<MaterialesRecibidos>();

    protected override async Task OnInitializedAsync()
    {
        listaAlmacenes = almacenBLL.GetList();
        listaMateriales = materialesBLL.GetList(e => true);
        listaTransportistas = transportistasBLL.GetList(t => true);
        entrada.EntradaId = EntradasId;
        await Task.Delay(1000);
        Buscar();
        isLoading=false;
    }
    public void Buscar()
    {
        int id = this.entrada.EntradaId;
        this.entrada = new EntradasAlmacen();
        recibido=new MaterialesRecibidos();
        entrada.EntradaId=id;
        if (this.entrada.EntradaId > 0)
        {
            var encontrado = entradasBLL.Buscar(this.entrada.EntradaId);

            if (encontrado != null)
            {
                this.entrada = encontrado;
                materialesRecibidos = entrada.MaterialesRecibidos;
            }
            else
            {
                toastService.ShowError($"No se encontró un registro con {entrada.EntradaId} como ID");
            }
        }
    }
    public void AgregarRecibido()
    {
        if(recibido.Cantidad<=0)
        {
            toastService.ShowError("Cantidad de entrada invalida", "Error");
            return;
        }
        var material = materialesBLL.Buscar(recibido.MaterialId);
        if(material==null)
        {
            toastService.ShowError("El Material no fue encontrado");
            return;
        }
        
        entrada.PrecioTotal += recibido.Cantidad * material.Costo;

        bool existe = entrada.MaterialesRecibidos.Any(m => m.MaterialId == recibido.MaterialId);

        if (!existe)
        {
            materialesRecibidos.Add(this.recibido);
        }
        else
        {
            var materialBuscado = entrada.MaterialesRecibidos.Find(m => m.MaterialId == recibido.MaterialId);
            if (materialBuscado != null)
            {
                entrada.PrecioTotal -= materialBuscado.Cantidad*material.Costo;
                recibido.Cantidad += materialBuscado.Cantidad;
                materialesRecibidos.Remove(materialBuscado);
                materialesRecibidos.Add(recibido);
            }
        }
        recibido = new MaterialesRecibidos();
    }
    public void RemoverRecibido(MaterialesRecibidos _recibido)
    {
        this.recibido= _recibido;
        this.materialesRecibidos.Remove(_recibido);
        var material = materialesBLL.Buscar(_recibido.MaterialId);
        if(material!= null)
            entrada.PrecioTotal -= _recibido.Cantidad * material.Costo;
    }
    public void Guardar()
    {
        if(EntradaValida())
        {
            entrada.MaterialesRecibidos=materialesRecibidos;
            
            if (entradasBLL.Guardar(entrada))
            {
                toastService.ShowSuccess("Se guardó exitosamente");
                Nuevo();
            }
            else
            {
                toastService.ShowError("No se pudo guardar.");
            }
        }
    }
    public void Nuevo()
    {
        entrada = new EntradasAlmacen();
        recibido=new MaterialesRecibidos();
        materialesRecibidos = new List<MaterialesRecibidos>();
    }
    public void Eliminar()
    {
        if (entradasBLL.Eliminar(entrada.EntradaId))
        {
            toastService.ShowSuccess("Eliminación Exitosa");
            Nuevo();
        }
        else
        {
            toastService.ShowError("No se pudo eliminar.");
        }
    }
    private bool EntradaValida()
    {
        bool valido = true;
        string MensajeError ="";
        if(entrada.AlmacenId==0)
        {
            MensajeError+=("Se debe indicar un almacen de origen.\n");
            valido = false;
        }
        if(entrada.TransportistaId==0)
        {
            MensajeError+=("Se debe indicar un transportista.\n");
            valido = false;
        }
        if(materialesRecibidos.Count<=0)
        {
            MensajeError+=("Se debe indicar al menos un material de entrada.\n");
            valido=false;
        }
        if(!valido)
            toastService.ShowError(MensajeError,"Operacion invalida");

        return valido;
    }
}