@page "/C_Salidas"

@inject IToastService toastService
@inject EntradasBLL entradasBLL
@inject SalidasBLL salidasBLL
@inject AlmacenBLL almacenBLL
@inject MaterialesBLL materialesBLL
@inject TransportistasBLL transportistasBLL

<PageTitle>Consulta de Salidas</PageTitle>

<EditForm Model="lista" OnValidSubmit="@Buscar">
    <div class="card" style="margin:30px;">
        <div class="card-header">
            <h5 style="text-align:center;">Consulta de Salidas</h5>
        </div>
    </div>

    <div class="card-body">
        <form>
            <div class="input-group d-flex align-items-end">

                @* Filtro *@
                <div class="input-group" style="margin-right: 30px; width: 16rem;">
                    <span class="input-group-text">Filtro</span>
                    <InputSelect class="form-select text-14 col-3" @bind-Value="Filtro">
                        <option value="1" selected>ID</option>
                        <option value="2">Cantidad materiales</option>
                        <option value="3">Almacen Origen</option>
                        <option value="4">Nombre Transportista</option>
                        <option value="5">Carnet Transportista</option>
                        <option value="6">Costo Total</option>
                    </InputSelect>
                </div>

                @* Fecha Desde *@
                <div class="input-group" style=" margin-right: 10px; width: 15rem;">
                    <span class="input-group-text">Desde</span>
                    <InputDate @bind-Value="FechaDesde" class="form-control col-4" />
                </div>

                @* Fecha Hasta*@
                <div class="input-group" style=" width: 15rem;">
                    <span class="input-group-text">Hasta</span>
                    <InputDate @bind-Value="FechaHasta" class="form-control col-4" />
                </div>

                @* TextBox Busqueda *@
                <div class="flex-fill mx-2">
                    <div class="input-group">
                        <span class="input-group-text">Busqueda</span>
                        <InputText class="form-control" @bind-Value="Criterio" />
                    </div>
                </div>

                    @* Boton Buscar *@
                    <button type="button"  style="z-index:0;" class="btn btn-primary" @onclick="Buscar">
                        <i class="oi oi-magnifying-glass mr-2" /> Buscar
                    </button>
                </div>
        </form>
    </div>
    @* Tabla  *@
    <table class="table table-light table-striped table-hover">
        <thead class="thead">
            <tr class="table table-light">
                <th>ID</th>
                <th>Fecha Salida</th>
                <th>Cantidad Materiales</th>
                <th>Almacen origen</th>
                <th>Transportista</th>
                <th>Carnet Transportista</th>
                <th>Costo Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (lista.Count == 0)
            {
                <span style="color:#FFFFFF; text-shadow: 1.5px 2px rgba(0, 0, 0, 0.4); margin: 20px; text-align:center">
                    No hay Salidas registradas</span>
            }
            else
            {
                @foreach (var item in lista)
                {
                    Fecha = DateOnly.FromDateTime(item.FechaSalida);
                    almacen= almacenBLL.Buscar(item.AlmacenId);
                    transportista= transportistasBLL.Buscar(item.TransportistaId);
                    @if(almacen != null && transportista != null)
                    {
                        <tr>
                            <td>@item.SalidaId</td>
                            <td>@Fecha</td>
                            <td>@item.MaterialesDespachados.Count</td>
                            <td>@almacen.DenominacionCentro</td>
                            <td>@transportista.Nombres @transportista.Apellidos</td>
                            <td>@transportista.NumeroCarnet</td>
                            <td>@item.CostoTotal</td>
                            <td><a class="btn btn-sm btn-outline-primary oi oi-eye" href="SalidasAlmacen/@item.SalidaId"> Ver</a>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</EditForm>


@code {

    private List<SalidasAlmacen> lista { get; set; } = new List<SalidasAlmacen>();
    private string? Filtro { get; set; } = string.Empty;
    private Transportistas? transportista {get;set;} = new Transportistas();
    private Almacenes? almacen {get;set;} = new Almacenes();
    private DateOnly Fecha { get; set; }
    private string? Criterio { get; set; }
    private DateTime FechaDesde { get; set; } = new DateTime(1990, 12, 31);
    private DateTime FechaHasta { get; set; } = DateTime.Today.AddDays(1);

    protected override void OnInitialized()
    {
        lista = salidasBLL.GetList(m => true); 
    }
    public void Buscar()
    {
        lista = new List<SalidasAlmacen>();
        if (Criterio != null)
        {
            switch (Filtro)
            {
                case "1": //Id
                    {
                        int ID = Utilities.ToInt(Criterio);
                        if (ID == -1)
                            lista = salidasBLL.GetList(m => m.FechaSalida>= FechaDesde && m.FechaSalida <= FechaHasta);
                        else
                            lista = salidasBLL.GetList(m => m.SalidaId == ID && m.FechaSalida >= FechaDesde && m.FechaSalida <=
                                FechaHasta);
                        break;
                    }
                    case "2": //cantidad elementos 
                    {
                        int CantidadElementos = Utilities.ToInt(Criterio);
                        if (CantidadElementos == -1)
                            lista = salidasBLL.GetList(m => m.FechaSalida >= FechaDesde && m.FechaSalida <= FechaHasta);
                        else
                            lista = salidasBLL.GetList(m => m.MaterialesDespachados.Count == CantidadElementos 
                                && m.FechaSalida >= FechaDesde && m.FechaSalida <= FechaHasta);
                        break;
                    }
                case "3": //Almacen Origen
                    {
                        var listaAlmacenes = almacenBLL.GetList().Where(m => m.DenominacionCentro.Contains(Criterio));
                        foreach(var almacen in listaAlmacenes)
                        {
                            lista.AddRange(salidasBLL.GetList(m => m.AlmacenId == almacen.AlmacenId && m.FechaSalida >= FechaDesde &&
                                m.FechaSalida <= FechaHasta));
                        }

                        break;
                    }
                case "4": //nombre transportista
                {
                    var listaTransportistas = transportistasBLL.GetList(m => m.Nombres.Contains(Criterio) || m.Apellidos.Contains(Criterio));
                    foreach (var transportista in listaTransportistas)
                    {
                        lista.AddRange(salidasBLL.GetList(m => m.TransportistaId == transportista.TransportistaId && m.FechaSalida >= FechaDesde &&
                            m.FechaSalida <= FechaHasta));
                    }
                    break;
                }
                case "5": //Carnet Transportista
                {
                    int Carnet = Utilities.ToInt(Criterio);
                    if(Carnet==-1)
                        lista = salidasBLL.GetList(m => m.FechaSalida >= FechaDesde && m.FechaSalida <= FechaHasta);
                    else
                    {
                        var listaTransportistas = transportistasBLL.GetList(m => m.NumeroCarnet == Carnet);
                        foreach (var transportista in listaTransportistas)
                        {
                            lista.AddRange(salidasBLL.GetList(m => m.TransportistaId == transportista.TransportistaId && m.FechaSalida >= FechaDesde &&
                                m.FechaSalida <= FechaHasta));
                        }
                    }
                    break;
                }
                case "6": // Precio total
                    {

                        decimal precio = Utilities.ToDecimal(Criterio);
                        if (precio == -1)
                            lista = salidasBLL.GetList(m => m.FechaSalida >= FechaDesde && m.FechaSalida <= FechaHasta);
                        else
                            lista = salidasBLL.GetList(m => m.CostoTotal == precio && m.FechaSalida >= FechaDesde 
                                && m.FechaSalida <= FechaHasta);
                        break;
                    }
            }
        }
        else
        {
            lista = salidasBLL.GetList(m => m.FechaSalida>= FechaDesde && m.FechaSalida <= FechaHasta);
        }
    }
}