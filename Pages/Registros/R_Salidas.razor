@page "/SalidasAlmacen"
@page "/SalidasAlmacen/{SalidaId:int}"

@inject IToastService toastService
<PageTitle>Salidas de material</PageTitle>
<EditForm Model="Salida" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div className="Container" style="Margin: 15px;">
        <div class="card">

            <div class="card-header">
                <h3 style="text-align: center;">Salidas de materiales</h3>
            </div>

            <div class="card-body" style="Margin: 15px 100px 15px 100px;">

                @* ID *@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <div class="input-group" style="margin: 22px; ">
                                <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">ID
                                    Salida</span>
                                <InputNumber @bind-Value="Salida.SalidaId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" style="z-index: 0;" class="btn btn-primary input-group-text"
                                        @onclick="Buscar"><span class="oi oi-magnifying-glass">Buscar</span></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Fecha registro *@
                <div class="input-group" style="margin: 22px; ">
                    <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Fecha de
                        movimiento</span>
                    <InputDate @bind-Value="Salida.FechaSalida" class="form-control col-4" />
                    <ValidationMessage For="@(() => Salida.FechaSalida)" />
                </div>

                @* Almacen Destino *@
                <div class="input-group" style="margin: 22px;">
                    <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Almacen Destino</span>
                    <InputSelect @bind-Value="Salida.AlmacenDestino.AlmacenId" class="form-select text-14 col-4">
                        <option selected hidden value="0">-- Seleccione un almacen Destino --</option>
                        @foreach (var almacen in listaAlmacenes)
                        {
                            <option value="@almacen.AlmacenId">@almacen.DenominacionCentro: @almacen.NombreCentro</option>
                        }
                    </InputSelect>
                </div>

                @* Transportista *@
                <div class="input-group" style="margin: 22px;">
                    <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Transportista</span>
                    <InputSelect @bind-Value="Salida.Transportista.TransportistaId" class="form-select text-14 col-4">
                        <option selected hidden value="0">-- Seleccione un transportista --</option>
                        @foreach (var transportista in listaTransportistas)
                        {
                            <option value="@transportista.TransportistaId">@transportista.Nombres @transportista.Apellidos</option>
                        }
                    </InputSelect>
                </div>
                @* subcard Materiales *@
                <div class="card">

                    <div class="card-header">
                        <h3>Materiales Despachados</h3>
                    </div>

                    <div class="card-body">
                        <div class="input-group d-flex align-items-end">
                            <div class="flex-fill mx-2">
                                <label>Material</label>
                                <InputSelect @bind-Value="materialID" class="form-select text-14">
                                    <option value="" selected="selected" disabled="disabled" hidden="hidden">
                                        -- Seleccione un material --</option>
                                    @foreach (var item in listaMateriales)
                                    {
                                        <option value="@item.MaterialId.ToString()">@item.Descripcion (Cantidad: @item.Cantidad @item.UnidadesMedida)</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="flex-fill mx-2" style="width: 12px;">
                                <label>Cantidad</label>
                                <InputNumber class="form-control" @bind-Value="Despachado.Cantidad" />
                            </div>
                            <div class="input-group-append">
                                <button type="button" style="z-index: 0;" class="btn btn-primary input-group-text"
                                    @onclick="AgregarDespachado">
                                    <span class="oi oi-plus"> Add</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        @* Tabla de detalles *@
                        <table class="table t">
                            <thead class="thead">
                                <tr class="table">
                                    <th>ID Material</th>
                                    <th>Descripci&oacute;n</th>
                                    <th>Cantidad</th>
                                    <th>Costo material</th>
                                    <th>Costo Total</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var Despachado in Salida.MaterialesDespachados)
                                {
                                    costoDespachado = Despachado.Cantidad * Despachado.Material.Costo;
                                    <tr>
                                        <td>@Despachado.Material.MaterialId</td>
                                        <td>@Despachado.Material.Descripcion</td>
                                        <td>@Despachado.Cantidad</td>
                                        <td>@Despachado.Material.Costo</td>
                                        <td>@costoDespachado</td>
                                        <td><span class="btn btn-sm btn-outline-secondary oi oi-x"
                                            @onclick="@(() => RemoverDespachado(Despachado))"></span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div Class="form-group" style="margin: 22px; width: 35%; display: right;">
                            <div class="input-group">
                                <span class="input-group-text">Costo Total de Salida:</span>
                                <InputNumber readonly class="form-control" @bind-Value="Salida.CostoTotal"/>
                                <span class="input-group-text">$RD</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer">
                @* Botones *@
                <div class="form-group text-center" style="justify-content: space-between;">
                    <button type="button" style="margin: 10px;" class="btn btn-lg btn-primary"
                        @onclick="Nuevo">Nuevo</button>
                    <button type="submit" style="margin: 10px;" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" style="margin: 10px;" class="btn btn-lg btn-danger"
                        @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int SalidaId { get; set; }

    private decimal costoDespachado {get;set;}

    public Almacenes? AlmacenDestino = new Almacenes();
    public Transportistas? transportista = new Transportistas();
    public MaterialesDespachados Despachado { get; set; } = new MaterialesDespachados();
    public Materiales? material { get; set; } = new Materiales();
    public string? materialID { get; set; } ="";
    public SalidasAlmacen Salida { get; set; } = new SalidasAlmacen();
    public List<Almacenes> listaAlmacenes { get; set; } = new List<Almacenes>();
    public List<Materiales> listaMateriales { get; set; } = new List<Materiales>();
    public List<Transportistas> listaTransportistas { get; set; } = new List<Transportistas>();

    [Inject]
    public SalidasBLL salidasBLL { get; set; }

    [Inject]
    public AlmacenBLL almacenBLL { get; set; }

    [Inject]
    public MaterialesBLL materialesBLL { get; set; }

    [Inject]
    public TransportistasBLL transportistasBLL { get; set; }


    protected override void OnInitialized()
    {
        listaAlmacenes = almacenBLL.GetList();
        listaMateriales = materialesBLL.GetList(e => true);
        listaTransportistas = transportistasBLL.GetList(t => true);
        Salida.SalidaId = SalidaId;
        Buscar();
    }
    public void Buscar()
    {
        if (this.Salida.SalidaId > 0)
        {
            var encontrado = salidasBLL.Buscar(this.Salida.SalidaId);

            if (encontrado != null)
                this.Salida = encontrado;
            else
                toastService.ShowError($"No se encontro un registro con {Salida.SalidaId} como ID");
        }
    }
    public void AgregarDespachado()
    {
        this.material = materialesBLL.Buscar(Utilities.ToInt(materialID));
        this.Despachado.Material = (material!=null)?material: new Materiales();
        Despachado = VerificarDespachado(Despachado);

        Salida.CostoTotal += Despachado.Cantidad * Despachado.Material.Costo;

        bool existe = Salida.MaterialesDespachados.Any(m => m.Material.MaterialId == Despachado.Material.MaterialId);

        if (!existe)
        {
            this.Salida.MaterialesDespachados.Add(this.Despachado);
        }
        else
        {
            var materialBuscado = Salida.MaterialesDespachados.Find(m => m.Material.MaterialId == Despachado.Material.MaterialId);
            if (materialBuscado != null)
            {
                Salida.CostoTotal -= materialBuscado.Cantidad*Despachado.Material.Costo;
                Despachado.Cantidad += materialBuscado.Cantidad;
                Salida.MaterialesDespachados.Remove(materialBuscado);
                Salida.MaterialesDespachados.Add(Despachado);
            }
        }
        Despachado = new MaterialesDespachados();
        material = new Materiales();
    }
    public void RemoverDespachado(MaterialesDespachados Despachado)
    {
        this.Salida.MaterialesDespachados.Remove(Despachado);
        Salida.CostoTotal -= Despachado.Cantidad * Despachado.Material.Costo;
    }
    public void Guardar()
    {
        if(SalidaValida())
        {
            AlmacenDestino = almacenBLL.Buscar(Salida.AlmacenDestino.AlmacenId);
            transportista = transportistasBLL.Buscar(Salida.Transportista.TransportistaId);

            if (AlmacenDestino != null)
                Salida.AlmacenDestino = AlmacenDestino;

            if(transportista != null) 
                Salida.Transportista = transportista;

            if (salidasBLL.Guardar(Salida))
            {
                toastService.ShowSuccess("Se guardó exitosamente");
                Nuevo();
            }
            else
            {
                toastService.ShowError("No se pudo guardar.");
            }
        }
    }
    public void Nuevo()
    {
        Salida = new SalidasAlmacen();
    }
    public void Eliminar()
    {
        if (salidasBLL.Eliminar(Salida.SalidaId))
        {
            toastService.ShowSuccess("Eliminación Exitosa");
            Nuevo();
        }
        else
        {
            toastService.ShowError("No se pudo eliminar.");
        }
    }
    private bool SalidaValida()
    {
        bool valido = true;
        if(Salida.MaterialesDespachados.Count<=0)
        {
            toastService.ShowError("Se debe indicar al menos un material de salida.", "Operacion invalida");
            valido=false;
        }
        if(Salida.Transportista.TransportistaId==0)
        {
            toastService.ShowError("Se debe indicar un transportista.", "Operacion invalida");
            valido = false;
        }
        if(Salida.AlmacenDestino.AlmacenId==0)
        {
            toastService.ShowError("Se debe indicar un almacen de destino.", "Operacion invalida");
            valido = false;
        }
        return valido;
    }
    private MaterialesDespachados VerificarDespachado(MaterialesDespachados Despachado)
    {
        if(Despachado.Cantidad>Despachado.Material.Cantidad)//si se pasa de los disponibles
            Despachado.Cantidad=Despachado.Material.Cantidad;
        
        return Despachado;
    }
}