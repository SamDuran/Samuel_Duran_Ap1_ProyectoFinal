@page "/R_Materiales"
@page "/R_Materiales/{MaterialId:int}"

@inject IToastService toastService
@inject MaterialesBLL materialesBLL

<PageTitle>Registro de Materiales</PageTitle>

@if(isLoading)
{
    <div class="Loader-Container">
        <div class="Loader"/>
        <div class="Loader2"/>
    </div>
}else
{

    <EditForm Model="material" OnValidSubmit="@Guardar">
        <DataAnnotationsValidator />
        <div className="Container" style="Margin: 15px;">
            <div class="card">

                <div class="card-header">
                    <h3 style="text-align: center;">Registro de Materiales</h3>
                </div>

                <div class="card-body" style="Margin: 15px 100px 15px 100px;">

                    @* ID *@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group" >
                                <div class="input-group" style="margin: 22px; ">
                                    <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">ID material</span>
                                    <InputNumber @bind-Value="material.MaterialId" class="form-control col-4" />
                                    <ValidationMessage For="@(() => material.MaterialId)" />
                                    <div class="input-group-append">
                                        <button type="button" style="z-index: 0;" class="btn btn-primary input-group-text"
                                            @onclick="Buscar"><span class="oi oi-magnifying-glass">Buscar</span></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @* Fecha registro *@
                    <div class="input-group" style="margin: 22px; ">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Fecha Registro</span>
                        <InputDate @bind-Value="material.FechaRegistro" class="form-control col-4" />
                        <ValidationMessage For="@(() => material.FechaRegistro)" />
                    </div>

                    @* Descripcion *@
                    <div class="input-group" style="margin: 22px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Descripci&oacute;n</span>
                        <InputText @bind-Value="material.Descripcion" class="form-control col-4" 
                            placeholder="Descripci&oacute;n"/>
                            <ValidationMessage For="@(() => material.Descripcion)" />
                    </div>


                    @* Unidad de medida *@
                    <div class="input-group" style="margin: 22px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Unidad de medida</span>
                        <InputSelect @bind-Value="material.UnidadesMedida" class="form-select text-14 col-4">
                            <option selected hidden value="">-- Seleccione una unidad de medida --</option>
                            <option value="Mtrs">Metros</option>
                            <option value="Pies">Pies</option>
                            <option value="Unidad">Unidad</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => material.UnidadesMedida)" />
                    </div>
                    @* Cantidad *@
                    <div class="input-group" style="margin: 22px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Cantidad</span>
                        <InputNumber @onblur="CantidadOrCostoChanged" @bind-Value="material.Cantidad" class="form-control col-4"/>
                        <ValidationMessage For="@(() => material.Cantidad)" />
                    </div>

                    @* Costo *@
                    <div class="input-group" style="margin: 22px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Costo</span>
                        <InputNumber @onblur="CantidadOrCostoChanged" @bind-Value="material.Costo" class="form-control col-4"/>
                        <ValidationMessage For="@(() => material.Costo)" />
                    </div>

                    @* ValorInventario *@
                    <div class="input-group" style="margin: 22px;">
                        <span class="input-group-text" style="background-color: #c5c5c550;width: 20%;">Valor Inventario</span>
                        <InputNumber readonly @bind-Value="material.ValorInventario" class="form-control col-4"/>
                    </div>

                </div>

                <div class="card-footer">
                    @* Botones *@
                    <div class="form-group text-center" style="justify-content: space-between;">
                        <button type="button" style="margin: 10px;" class="btn btn-lg btn-primary"
                            @onclick="Nuevo">Nuevo</button>
                        <button type="submit" style="margin: 10px;" class="btn btn-lg btn-success">Guardar</button>
                        <button type="button" style="margin: 10px;" class="btn btn-lg btn-danger"
                            @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int MaterialId { get; set; }
    private bool isLoading {get;set;} = true;
    public Materiales material { get; set; } = new Materiales(); 

    protected override void OnInitialized()
    {
        isLoading = false;
        material.MaterialId = MaterialId;
        Buscar();
        isLoading=false;
    }
    public void Buscar()
    {
        if(this.material.MaterialId>0)
        {
            var encontrado = materialesBLL.Buscar(this.material.MaterialId);

            if(encontrado!= null)
                this.material= encontrado;
        }
    }
    private void CantidadOrCostoChanged()
    {
        material.ValorInventario = material.Cantidad*material.Costo;
    }
    public void Guardar()
    {
        if(MaterialValido())
        {
            if(materialesBLL.Guardar(material))
            {
                toastService.ShowSuccess("Se guardó exitosamente");
                Nuevo();
            }
            else
            {
                toastService.ShowError("No se pudo guardar.");
            }
        }
    }
    public void Nuevo()
    {
        material = new Materiales();
    }
    public void Eliminar()
    {
        if(materialesBLL.Eliminar(material.MaterialId))
        {
            toastService.ShowSuccess("Eliminación Exitosa");
            Nuevo();
        }
        else
        {
            toastService.ShowError("No se pudo eliminar.");
        }
    }
    private bool MaterialValido()
    {
        bool valido = true;
        try
        {
            var MaterialExistente = materialesBLL.BuscarPorDescripcion(this.material.Descripcion);
            
            if(MaterialExistente !=null && MaterialExistente.MaterialId != this.material.MaterialId)
            {
                //Si existe el material y es el mismo id, se le permite modificar
                //Pero NO si existe y son diferentes ID
                valido = false;
                toastService.ShowError("El material ya existe", "Operacion invalida");
            }
        }
        catch (System.Exception)
        {
            throw;
        }

        return valido;
    }
}